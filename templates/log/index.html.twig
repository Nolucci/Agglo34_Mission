{% extends 'base.html.twig' %}

{% block title %}Logs{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
    .action-buttons {
        white-space: nowrap;
    }
    .loading-spinner {
        text-align: center;
        padding: 20px;
        display: none;
    }
    .no-logs {
        text-align: center;
        padding: 20px;
        font-style: italic;
        color: #6c757d;
    }
    .details-data {
        max-width: 250px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    .details-data:hover {
        white-space: normal;
        word-wrap: break-word;
    }
    .table th, .table td {
        vertical-align: middle;
    }
    .table th {
        background-color: #f8f9fa;
        font-weight: 600;
    }
    .btn-group .btn {
        margin-right: 3px;
    }
</style>
{% endblock %}

{% block body %}
<div class="page-wrapper">
    <div class="page-container">
        <div class="main-content">
            <div class="section__content section__content--p30">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-lg-12">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Liste des Logs</strong>
                                    <button class="btn btn-sm btn-danger float-right ml-2" id="delete-all-logs">
                                        <i class="fa fa-trash"></i> Tout supprimer
                                    </button>
                                    <button class="btn btn-sm btn-primary float-right" data-toggle="modal" data-target="#logsFiltersModal">
                                        <i class="fa fa-filter"></i> Filtres
                                    </button>
                                </div>
                                <div class="card-body" style="height: auto;">
                                    <div class="form-group">
                                        <label for="searchInput">Rechercher par attribut:</label>
                                        <input type="text" class="form-control" id="searchInput" placeholder="Entrez un terme de recherche">
                                    </div>
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th width="15%">Utilisateur</th>
                                                    <th width="10%">Action</th>
                                                    <th width="15%">Type d'Entité</th>
                                                    <th width="10%">ID Entité</th>
                                                    <th width="15%">Date</th>
                                                    <th width="35%">Détails</th>
                                                </tr>
                                            </thead>
                                            <tbody id="logs-table-body">
                                                <!-- Les logs seront chargés ici via JavaScript -->
                                            </tbody>
                                        </table>
                                    </div>
                                    <div id="loading-spinner" class="loading-spinner">
                                        <i class="fa fa-spinner fa-spin fa-2x"></i>
                                        <p>Chargement des logs...</p>
                                    </div>
                                    <div id="no-logs" class="no-logs" style="display: none;">
                                        <p>Aucun log trouvé.</p>
                                    </div>
                                    <div class="mt-3">
                                        <div id="load-more-container" class="text-center" style="display: none;">
                                            <button id="load-more-btn" class="btn btn-outline-primary">
                                                <i class="fa fa-refresh"></i> Charger plus
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% include './modals/_logs_filters_modal.html.twig' %}

<!-- Modal de confirmation de suppression -->
<div class="modal fade" id="deleteAllConfirmModal" tabindex="-1" role="dialog" aria-labelledby="deleteAllConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteAllConfirmModalLabel">Confirmation de suppression</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Êtes-vous sûr de vouloir supprimer définitivement tous les logs ?</p>
                <p class="text-danger"><strong>Attention :</strong> Cette action est irréversible.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" id="confirm-delete-all">Supprimer définitivement</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentPage = 1;
    let hasMoreLogs = false;
    let isLoading = false;
    let allLogs = [];
    let displayedLogs = [];

    // Fonction pour filtrer les logs par recherche
    document.getElementById('searchInput').addEventListener('keyup', function() {
        const searchTerm = this.value.toLowerCase();

        if (searchTerm.length === 0) {
            // Si le champ de recherche est vide, afficher tous les logs
            displayedLogs = [...allLogs];
        } else {
            // Sinon, filtrer les logs
            displayedLogs = allLogs.filter(log => {
                // Rechercher dans le username
                if (log.username.toLowerCase().includes(searchTerm)) return true;

                // Rechercher dans l'action
                if (log.action.toLowerCase().includes(searchTerm)) return true;

                // Rechercher dans le type d'entité
                if (log.entityType.toLowerCase().includes(searchTerm)) return true;

                // Rechercher dans l'ID d'entité
                if (log.entityId.toString().includes(searchTerm)) return true;

                // Rechercher dans la date
                if (log.createdAt.toLowerCase().includes(searchTerm)) return true;

                // Rechercher dans les détails
                if (log.details && log.details.toLowerCase().includes(searchTerm)) return true;

                return false;
            });
        }

        // Mettre à jour l'affichage
        renderLogsTable(displayedLogs);
    });

    // Fonction pour afficher les logs dans le tableau
    function renderLogsTable(logs) {
        const tableBody = document.getElementById('logs-table-body');
        tableBody.innerHTML = '';

        if (logs.length === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="6" class="text-center">
                        <i class="fa fa-info-circle"></i> Aucun log ne correspond à votre recherche.
                    </td>
                </tr>
            `;
            return;
        }

        logs.forEach(log => {
            const row = document.createElement('tr');

            // Créer les cellules
            row.innerHTML = `
                <td>${log.username}</td>
                <td>${log.action}</td>
                <td>${log.entityType}</td>
                <td>${log.entityId}</td>
                <td>${log.createdAt}</td>
                <td class="details-data">${log.details || ''}</td>
            `;

            tableBody.appendChild(row);
        });
    }

    // Fonction pour charger les logs
    function loadLogs(page = 1, append = false) {
        if (isLoading) return;

        isLoading = true;

        // Afficher le spinner de chargement
        if (!append) {
            document.getElementById('logs-table-body').innerHTML = '';
            document.getElementById('no-logs').style.display = 'none';
        }
        document.getElementById('loading-spinner').style.display = 'block';
        document.getElementById('load-more-container').style.display = 'none';

        // Récupérer les filtres actuels
        const urlParams = new URLSearchParams(window.location.search);
        const entityType = urlParams.get('entityType') || '';
        const action = urlParams.get('action') || '';
        const username = urlParams.get('username') || '';
        const startDate = urlParams.get('startDate') || '';
        const endDate = urlParams.get('endDate') || '';

        // Construire l'URL avec les paramètres
        let url = `{{ path('app_logs_load') }}?page=${page}`;
        if (entityType) url += `&entityType=${entityType}`;
        if (action) url += `&action=${action}`;
        if (username) url += `&username=${username}`;
        if (startDate) url += `&startDate=${startDate}`;
        if (endDate) url += `&endDate=${endDate}`;

        // Effectuer la requête AJAX
        fetch(url)
            .then(response => response.json())
            .then(data => {
                isLoading = false;
                document.getElementById('loading-spinner').style.display = 'none';

                if (data.logs.length === 0 && !append) {
                    document.getElementById('no-logs').style.display = 'block';
                    return;
                }

                // Mettre à jour les variables de pagination
                currentPage = page;
                hasMoreLogs = data.hasMore;

                // Stocker les logs
                if (append) {
                    allLogs = [...allLogs, ...data.logs];
                } else {
                    allLogs = [...data.logs];
                }

                displayedLogs = [...allLogs];

                // Afficher les logs
                renderLogsTable(displayedLogs);

                // Afficher ou masquer le bouton "Charger plus"
                document.getElementById('load-more-container').style.display = hasMoreLogs ? 'block' : 'none';
            })
            .catch(error => {
                console.error('Erreur lors du chargement des logs:', error);
                isLoading = false;
                document.getElementById('loading-spinner').style.display = 'none';

                // Afficher un message d'erreur
                if (!append) {
                    document.getElementById('logs-table-body').innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center text-danger">
                                <i class="fa fa-exclamation-triangle"></i> Une erreur est survenue lors du chargement des logs.
                            </td>
                        </tr>
                    `;
                }
            });
    }

    // Charger les logs au chargement de la page
    loadLogs();

    // Gérer le clic sur le bouton "Charger plus"
    document.getElementById('load-more-btn').addEventListener('click', function() {
        if (hasMoreLogs && !isLoading) {
            loadLogs(currentPage + 1, true);
        }
    });

    // Gérer le clic sur le bouton "Tout supprimer"
    document.getElementById('delete-all-logs').addEventListener('click', function() {
        $('#deleteAllConfirmModal').modal('show');
    });

    // Gérer la confirmation de suppression de tous les logs
    document.getElementById('confirm-delete-all').addEventListener('click', function() {
        // Fermer le modal de confirmation
        $('#deleteAllConfirmModal').modal('hide');

        // Effectuer la requête AJAX pour supprimer tous les logs
        fetch('{{ path('app_logs_delete_all') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Afficher un message de succès
                alert(data.message);

                // Recharger les logs
                loadLogs();
            } else {
                // Afficher un message d'erreur
                alert(data.message || 'Une erreur est survenue lors de la suppression des logs.');
            }
        })
        .catch(error => {
            console.error('Erreur lors de la suppression des logs:', error);
            alert('Une erreur est survenue lors de la suppression des logs.');
        });
    });
});
</script>
{% endblock %}