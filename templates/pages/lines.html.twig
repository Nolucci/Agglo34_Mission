{% extends './base.html.twig' %}

{% block title %}Informations des Lignes Téléphoniques{% endblock %}

{% block body %}
<div class="page-wrapper">
    <div class="page-container">
        <div class="main-content">
            <div class="section__content section__content--p30">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Statistiques des Lignes</strong>
                                </div>
                                <div class="card-body text-center" style="height: 300px;">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fa fa-phone fa-2x"></i></h5>
                                                    <p class="card-text">Total des lignes</p>
                                                    <h3 style="font-size: 1.5rem;">{{ phoneLines|length }}</h3>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fa fa-building fa-2x"></i></h5>
                                                    <p class="card-text">Services uniques</p>
                                                    <h3 style="font-size: 1.5rem;">{{ phoneLineStats.unique_services }}</h3>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fa fa-signal fa-2x"></i></h5>
                                                    <p class="card-text">Opérateurs</p>
                                                    <h3 style="font-size: 1.5rem;">{{ phoneLineStats.unique_operators }}</h3>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                     <h5 class="card-title"><i class="fa fa-check-circle fa-2x"></i></h5>
                                                    <p class="card-text">Lignes fonctionnelles</p>
                                                    <h3 style="font-size: 1.5rem;">{{ phoneLineStats.working_lines }}</h3>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-3">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Nombre de Lignes par Commune</strong>
                                </div>
                                <div class="card-body text-center" style="height: 300px;">
                                    <canvas id="sales-chart"></canvas>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-3">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Lignes par Opérateur</strong>
                                </div>
                                <div class="card-body text-center" style="height: 300px;">
                                    <canvas id="operator-bar-chart"></canvas>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-3">
                             <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Carte de l'Agglomération</strong>
                                </div>
                                <div class="card-body text-center" style="height: 300px;">
                                    <div id="map-agglomeration" style="height: 300px; width: 100%; border: 1px solid #ccc;"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-12">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Liste des Lignes Téléphoniques</strong>
                                    <button class="btn btn-sm btn-danger float-right ml-2" id="delete-all-lines-btn" data-toggle="modal" data-target="#deleteAllModal">
                                        <i class="fa fa-trash"></i> Supprimer tout
                                    </button>
                                    <button class="btn btn-sm btn-primary float-right ml-2" data-toggle="modal" data-target="#lignesFiltersModal">
                                        <i class="fa fa-filter"></i> Filtres
                                    </button>
                                    <button class="btn btn-sm btn-success float-right" data-toggle="modal" data-target="#linesModal">
                                        <i class="fa fa-plus"></i> Ajouter
                                    </button>
                                </div>
                                <div class="card-body" style="height: auto;">{# Adjusted height for table #}
                                     <div class="form-group">
                                        <label for="searchInput">Rechercher par attribut:</label>
                                        <input type="text" class="form-control" id="searchInput" placeholder="Entrez un terme de recherche">
                                    </div>
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Ligne Directe (SDA)</th>
                                                    <th>Numéro Court</th>
                                                    <th>Commune</th>
                                                    <th>Localisation</th>
                                                    <th>Service</th>
                                                    <th>Attribué à</th>
                                                    <th>Opérateur</th>
                                                    <th>Type de Ligne</th>
                                                    <th>Statut</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="phone-lines-tbody">
                                                <!-- Les données seront chargées via JavaScript -->
                                            </tbody>
                                        </table>
                                    </div>
                                    <!-- Pagination intégrée dans le tableau -->
                                    <div class="mt-3">
                                        <nav aria-label="Pagination des lignes téléphoniques">
                                            <ul class="pagination justify-content-center" id="phone-lines-pagination">
                                                <!-- La pagination sera générée par JavaScript -->
                                            </ul>
                                        </nav>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% include './modals/_line_modal.html.twig' %}
{% include './modals/_lines_filters_modal.html.twig' with { municipalities: municipalities } %}
</div>

{% import './infos/_macros.html.twig' as macros %}
{{ macros.static_modal('Confirmer la suppression', 'Voulez-vous vraiment supprimer cette ligne ?') }}

<!-- Modal pour confirmer la suppression de toutes les lignes -->
<div class="modal fade" id="deleteAllModal" tabindex="-1" role="dialog" aria-labelledby="deleteAllModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteAllModalLabel">Confirmer la suppression</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Voulez-vous vraiment supprimer <strong>toutes</strong> les lignes téléphoniques ? Cette action est irréversible.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" id="confirm-delete-all-lines-btn">Supprimer tout</button>
            </div>
        </div>
    </div>
</div>


{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script src="{{ asset('js/map.js') }}"></script>
  <script src="{{ asset('js/search-filter.js') }}"></script>
  <script>
      document.addEventListener('DOMContentLoaded', function() {
          // Initialiser la carte si l'élément existe
          if (document.getElementById("map-agglomeration")) {
              const map = L.map("map-agglomeration").setView([43.3442, 3.2158], 10);

              L.tileLayer("https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png", {
                  attribution: "&copy; OpenStreetMap contributors",
              }).addTo(map);

              // Chargement des données GeoJSON
              fetch("/data/beziers-agglo-points.geojson")
                  .then(res => res.json())
                  .then(data => {
                      const layer = L.geoJSON(data, {
                          pointToLayer: function (feature, latlng) {
                              return L.circleMarker(latlng, {
                                  radius: 6,
                                  fillColor: "#1e90ff",
                                  color: "#fff",
                                  weight: 1,
                                  opacity: 1,
                                  fillOpacity: 0.9
                              });
                          },
                          onEachFeature: function (feature, layer) {
                              const props = feature.properties;

                              // Tooltip (survol)
                              if (props && props.nom) {
                                  layer.bindTooltip(props.nom, {
                                      direction: 'top',
                                      offset: [0, -5],
                                      sticky: true
                                  });
                              }

                              // Popup (clic)
                              layer.on('click', () => {
                                  let rows = "";
                                  for (const [key, value] of Object.entries(props)) {
                                      rows += `<tr><th>${key}</th><td>${value}</td></tr>`;
                                  }

                                  const popupContent = `
                                  <div>
                                      <h5>${props.nom}</h5>
                                      <table class="table table-bordered table-sm">
                                          <tbody>${rows}</tbody>
                                      </table>
                                  </div>
                              `;

                                  layer.bindPopup(popupContent, {
                                      offset: [0, -5],
                                      autoPan: true,
                                      closeButton: true
                                  }).openPopup();
                              });
                          }
                      }).addTo(map);

                      map.fitBounds(layer.getBounds(), {
                          padding: [20, 20],
                          maxZoom: 13
                      });
                  })
                  .catch(err => {
                      console.error("Erreur de chargement GeoJSON :", err);
                  });
          }
      });
      window.allPhoneLines = [];
      window.displayedPhoneLines = [];
      let currentPage = 1;
      let totalPages = 1;
      let itemsPerPage = 50;
      let totalItems = 0;

      // Charger les données des lignes téléphoniques avec pagination
      function loadPhoneLines(page = 1) {
          fetch(`/api/phone-line/list?page=${page}&limit=${itemsPerPage}`)
              .then(response => response.json())
              .then(data => {
                  allPhoneLines = data.data;
                  displayedPhoneLines = [...allPhoneLines];
                  totalItems = data.total;
                  totalPages = data.totalPages;
                  currentPage = data.page;

                  renderLinesTable(displayedPhoneLines);
                  renderPagination();
              })
              .catch(error => {
                  console.error('Erreur lors du chargement des lignes téléphoniques:', error);
              });
      }

      // Générer la pagination
      function renderPagination() {
          const paginationElement = document.getElementById('phone-lines-pagination');
          if (!paginationElement) return;

          paginationElement.innerHTML = '';

          // Bouton précédent
          const prevLi = document.createElement('li');
          prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
          const prevLink = document.createElement('a');
          prevLink.className = 'page-link';
          prevLink.href = '#';
          prevLink.textContent = 'Précédent';
          prevLink.addEventListener('click', (e) => {
              e.preventDefault();
              if (currentPage > 1) {
                  loadPhoneLines(currentPage - 1);
              }
          });
          prevLi.appendChild(prevLink);
          paginationElement.appendChild(prevLi);

          // Pages numérotées
          const maxPagesToShow = 5;
          let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
          let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

          if (endPage - startPage + 1 < maxPagesToShow) {
              startPage = Math.max(1, endPage - maxPagesToShow + 1);
          }

          for (let i = startPage; i <= endPage; i++) {
              const pageLi = document.createElement('li');
              pageLi.className = `page-item ${i === currentPage ? 'active' : ''}`;
              const pageLink = document.createElement('a');
              pageLink.className = 'page-link';
              pageLink.href = '#';
              pageLink.textContent = i;
              pageLink.addEventListener('click', (e) => {
                  e.preventDefault();
                  loadPhoneLines(i);
              });
              pageLi.appendChild(pageLink);
              paginationElement.appendChild(pageLi);
          }

          // Bouton suivant
          const nextLi = document.createElement('li');
          nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
          const nextLink = document.createElement('a');
          nextLink.className = 'page-link';
          nextLink.href = '#';
          nextLink.textContent = 'Suivant';
          nextLink.addEventListener('click', (e) => {
              e.preventDefault();
              if (currentPage < totalPages) {
                  loadPhoneLines(currentPage + 1);
              }
          });
          nextLi.appendChild(nextLink);
          paginationElement.appendChild(nextLi);
      }

        // Sales Chart
        var ctxSales = document.getElementById("sales-chart");
        if (ctxSales) {
            ctxSales.height = 150;
            var myChartSales = new Chart(ctxSales, {
                type: 'bar',
                data: {
                    labels: {{ salesChartData.labels | json_encode | raw }},
                    datasets: [{
                        label: "Nombre de Lignes",
                        data: {{ salesChartData.data | json_encode | raw }},
                        backgroundColor: 'rgba(220,53,69,0.75)',
                        borderColor: 'rgba(220,53,69,0.75)',
                        borderWidth: 1,
                    }]
                },
                options: {
                    responsive: true,
                    tooltips: {
                        mode: 'nearest',
                        axis: 'x',
                        titleFontSize: 12,
                        titleFontColor: '#000',
                        bodyFontColor: '#000',
                        backgroundColor: '#fff',
                        titleFontFamily: 'Poppins',
                        bodyFontFamily: 'Poppins',
                        cornerRadius: 3,
                        intersect: false,
                    },
                    legend: {
                        display: false,
                        labels: {
                            fontFamily: 'Poppins',
                        },
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            gridLines: {
                                display: false,
                                drawBorder: false
                            },
                            ticks: {
                                fontFamily: "Poppins"
                            }
                        }],
                        yAxes: [{
                            display: true,
                            gridLines: {
                                display: false,
                                drawBorder: false
                            },
                            ticks: {
                                beginAtZero: true,
                                fontFamily: "Poppins"
                            }
                        }]
                    },
                    title: {
                        display: false,
                        text: 'Normal Legend'
                    }
                }
            });
        }

        // Operator Bar Chart
        var ctxOperator = document.getElementById("operator-bar-chart");
        if (ctxOperator) {
            ctxOperator.height = 200; // Ajustez la hauteur si nécessaire
            var myChartOperator = new Chart(ctxOperator, {
                type: 'bar',
                defaultFontFamily: 'Poppins',
                data: {
                    labels: {{ operatorChartData.labels | json_encode | raw }},
                    datasets: [
                        {
                            label: "Nombre de Lignes", // Adapter le label
                            data: {{ operatorChartData.data | json_encode | raw }},
                            borderColor: "rgba(0, 123, 255, 0.9)",
                            borderWidth: "0",
                            backgroundColor: "rgba(0, 123, 255, 0.5)",
                            fontFamily: "Poppins"
                        }
                    ]
                },
                options: {
                    legend: {
                        position: 'top',
                        labels: {
                            fontFamily: 'Poppins'
                        }
                    },
                    scales: {
                        xAxes: [{
                            ticks: {
                                fontFamily: "Poppins"
                            }
                        }],
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                fontFamily: "Poppins"
                            }
                        }]
                    }
                }
            });
        }


        // Fonction pour rendre la table des lignes
        window.renderLinesTable = function(linesToDisplay) {
            const tbody = document.querySelector('.table tbody');
            tbody.innerHTML = ''; // Clear current table

            linesToDisplay.forEach(line => {
                const row = `
                    <tr>
                        <td>${line.directLine && line.directLine !== '' ? line.directLine : 'Non défini'}</td>
                        <td>${line.shortNumber && line.shortNumber !== '' ? line.shortNumber : 'Non défini'}</td>
                        <td>${line.municipality && line.municipality.name ? line.municipality.name : 'Non défini'}</td>
                        <td>${line.location && line.location !== '' ? line.location : 'Non défini'}</td>
                        <td>${line.service && line.service !== '' ? line.service : 'Non défini'}</td>
                        <td>${line.assignedTo && line.assignedTo !== '' ? line.assignedTo : 'Non défini'}</td>
                        <td>${line.operator && line.operator !== '' ? line.operator : 'Non défini'}</td>
                        <td>${line.lineType && line.lineType !== '' ? line.lineType : 'Non défini'}</td>
                        <td>
                            ${line.isWorking ? '<span class="badge badge-success">Fonctionne</span>' : '<span class="badge badge-danger">Ne fonctionne pas</span>'}
                        </td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-primary edit-btn mr-1" onclick="editLine(${line.id})">
                                    <i class="fa fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger delete-btn" data-id="${line.id}" data-type="phone_line" onclick="openDeleteModal(${line.id}, 'phone_line')">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // Initialisation de la carte des lignes
        function initMap() {
            // Logique de la carte à implémenter
        }

        // Initial render of the table
        document.addEventListener('DOMContentLoaded', function() {
            renderLinesTable(displayedPhoneLines);

            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', function(event) {
                    const searchTerm = event.target.value.toLowerCase();
                    displayedPhoneLines = allPhoneLines.filter(line => {
                        // Filter based on specific attributes containing the search term
                        const municipalityName = line.municipality && line.municipality.name ? line.municipality.name.toLowerCase() : '';
                        const location = line.location ? line.location.toLowerCase() : '';
                        const service = line.service ? line.service.toLowerCase() : '';
                        const assignedTo = line.assignedTo ? line.assignedTo.toLowerCase() : '';
                        const operator = line.operator ? line.operator.toLowerCase() : '';
                        const lineType = line.lineType ? line.lineType.toLowerCase() : '';
                        const isWorking = line.isWorking ? 'fonctionne' : 'ne fonctionne pas'; // Convert boolean to string for searching

                        return municipalityName.includes(searchTerm) ||
                               location.includes(searchTerm) ||
                               service.includes(searchTerm) ||
                               assignedTo.includes(searchTerm) ||
                               operator.includes(searchTerm) ||
                               lineType.includes(searchTerm) ||
                               isWorking.includes(searchTerm);
                    });
                    renderLinesTable(displayedPhoneLines);
                });
            }
        });
    // Filter logic for Phone Lines
    const applyFiltersBtn = document.getElementById('applyFiltersBtn');
    const resetFiltersBtn = document.getElementById('resetFiltersBtn');
    const filtersForm = document.getElementById('lignesFiltersForm');
    const lignesFiltersModal = document.getElementById('lignesFiltersModal');

    if (applyFiltersBtn) {
        applyFiltersBtn.addEventListener('click', function() {
            const formData = new FormData(filtersForm);
            const filters = {};

            for (let [key, value] of formData.entries()) {
                if (value) {
                    filters[key] = value;
                }
            }

            displayedPhoneLines = allPhoneLines.filter(line => {
                let passesFilter = true;
                for (const key in filters) {
                    const filterValue = filters[key];
                    const lineValue = line[key];

                    if (key === 'isWorking') {
                        const filterBoolean = filterValue === '1';
                        if (lineValue !== filterBoolean) {
                            passesFilter = false;
                            break;
                        }
                    } else if (key === 'municipality') {
                        if (lineValue === null || lineValue.id.toString() !== filterValue) {
                            passesFilter = false;
                            break;
                        }
                    }
                    else if (lineValue === null || lineValue === undefined) {
                         passesFilter = false;
                         break;
                    }
                    else if (lineValue.toString().toLowerCase() !== filterValue.toLowerCase()) {
                        passesFilter = false;
                        break;
                    }
                }
                return passesFilter;
            });

            renderLinesTable(displayedPhoneLines);
            $('#lignesFiltersModal').modal('hide');
        });
    }

    if (resetFiltersBtn) {
        resetFiltersBtn.addEventListener('click', function() {
            filtersForm.reset();
            displayedPhoneLines = [...allPhoneLines];
            renderLinesTable(displayedPhoneLines);
            $('#lignesFiltersModal').modal('hide');
        });
    }
    </script>
    <!-- Fonction pour ouvrir le modal de suppression -->
    <script>
        // Charger les lignes téléphoniques au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            loadPhoneLines();

            // Gestionnaire pour le bouton de suppression de toutes les lignes
            const deleteAllBtn = document.getElementById('confirm-delete-all-lines-btn');
            if (deleteAllBtn) {
                deleteAllBtn.addEventListener('click', function() {
                    fetch('/api/phone-line/delete-all', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            $('#deleteAllModal').modal('hide');
                            alert(data.message);
                            window.location.reload();
                        } else {
                            alert('Erreur: ' + (data.error || 'Une erreur est survenue lors de la suppression'));
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        alert('Une erreur est survenue lors de la suppression');
                    });
                });
            }
        });

        function openDeleteModal(id, type) {
            console.log("Ouverture du modal de suppression pour", type, "avec ID", id);

            // Stocker les données dans le modal
            const modal = document.getElementById('staticModal');
            if (modal) {
                modal.setAttribute('data-item-id', id);
                modal.setAttribute('data-item-type', type);

                if (type === 'phone_line') {
                    modal.setAttribute('data-line-id', id);
                }

                // Mettre à jour le texte du modal
                const title = modal.querySelector('.modal-title');
                const body = modal.querySelector('.modal-body p');

                if (title) {
                    title.textContent = 'Confirmer la suppression de ' +
                        (type === 'equipment' ? 'l\'équipement' :
                         type === 'box' ? 'la box' :
                         type === 'phone_line' ? 'la ligne téléphonique' : 'l\'élément');
                }

                if (body) {
                    body.textContent = 'Voulez-vous vraiment supprimer ' +
                        (type === 'equipment' ? 'cet équipement' :
                         type === 'box' ? 'cette box' :
                         type === 'phone_line' ? 'cette ligne téléphonique' : 'cet élément') + ' ?';
                }

                // Ouvrir explicitement la modale avec jQuery
                $('#staticModal').modal('show');
            } else {
                console.error("Modal #staticModal non trouvé dans le DOM");
            }
        }
    </script>
    <!-- Charger delete-confirmation.js avant phone-lines.js pour éviter les conflits -->
    <script src="{{ asset('js/delete-confirmation.js') }}"></script>
    <script src="{{ asset('js/phone-lines.js') }}"></script>

{% endblock %}
