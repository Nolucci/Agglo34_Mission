{% extends './base.html.twig' %}

{% block title %}Informations des Lignes Téléphoniques{% endblock %}

{% block body %}
<div class="page-wrapper">
    <div class="page-container">
        <div class="main-content">
            <div class="section__content section__content--p30 lines-content">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Statistiques des Lignes</strong>
                                </div>
                                <div class="card-body text-center" style="height: 300px;">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fa fa-phone fa-2x"></i></h5>
                                                    <p class="card-text">Total des lignes</p>
                                                    <h3 style="font-size: 1.5rem;">{{ phoneLines|length }}</h3>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fa fa-building fa-2x"></i></h5>
                                                    <p class="card-text">Bâtiments</p>
                                                    <h3 style="font-size: 1.5rem;">{{ phoneLineStats.unique_services }}</h3>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fa fa-signal fa-2x"></i></h5>
                                                    <p class="card-text">Opérateurs</p>
                                                    <h3 style="font-size: 1.5rem;">{{ phoneLineStats.unique_operators }}</h3>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                     <h5 class="card-title"><i class="fa fa-check-circle fa-2x"></i></h5>
                                                    <p class="card-text">Lignes fonctionnelles</p>
                                                    <h3 style="font-size: 1.5rem;">{{ phoneLineStats.working_lines }}</h3>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Graphiques des Lignes</strong>
                                </div>
                                <div class="card-body" style="height: 300px;">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div style="height: 250px;">
                                                <canvas id="phone-line-type-chart"></canvas>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div style="height: 250px;">
                                                <canvas id="phone-line-operator-chart"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-3">
                             <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Carte de l'Agglomération</strong>
                                </div>
                                <div class="card-body text-center" style="height: 300px;">
                                    <div id="map-agglomeration" style="height: 300px; width: 100%; border: 1px solid #ccc;"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-12">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Liste des Lignes Téléphoniques</strong>
                                    <button class="btn btn-sm btn-danger float-right ml-2" id="delete-all-lines-btn" data-toggle="modal" data-target="#deleteAllModal">
                                        <i class="fa fa-trash"></i> Supprimer tout
                                    </button>
                                    <div class="btn-group float-right ml-2">
                                        <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" id="exportDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            <i class="fa fa-download"></i> Exporter
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="exportDropdown">
                                            <a class="dropdown-item" href="#" id="export-csv-btn">
                                                <i class="fa fa-file-excel-o"></i> Export CSV
                                            </a>
                                            <a class="dropdown-item" href="#" id="export-pdf-btn">
                                                <i class="fa fa-file-pdf-o"></i> Export PDF
                                            </a>
                                        </div>
                                    </div>
                                    <button class="btn btn-sm btn-primary float-right ml-2" data-toggle="modal" data-target="#lignesFiltersModal">
                                        <i class="fa fa-filter"></i> Filtres
                                    </button>
                                    <button class="btn btn-sm btn-success float-right" data-toggle="modal" data-target="#linesModal">
                                        <i class="fa fa-plus"></i> Ajouter
                                    </button>
                                </div>
                                <div class="card-body" style="height: auto;">{# Adjusted height for table #}
                                     <div class="form-group">
                                        <label for="searchInput">Rechercher par attribut:</label>
                                        <input type="text" class="form-control" id="searchInput" placeholder="Entrez un terme de recherche">
                                    </div>
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Ligne Directe (SDA)</th>
                                                    <th>Numéro Court</th>
                                                    <th>Commune</th>
                                                    <th>Localisation</th>
                                                    <th>Service</th>
                                                    <th>Attribué à</th>
                                                    <th>Opérateur</th>
                                                    <th>Type de Ligne</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="phone-lines-tbody">
                                                <!-- Les données seront chargées via JavaScript -->
                                            </tbody>
                                        </table>
                                    </div>
                                    <!-- Pagination intégrée dans le tableau -->
                                    <div class="mt-3">
                                        <nav aria-label="Pagination des lignes téléphoniques">
                                            <ul class="pagination justify-content-center" id="phone-lines-pagination">
                                                <!-- La pagination sera générée par JavaScript -->
                                            </ul>
                                        </nav>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% include './modals/_line_modal.html.twig' %}
{% include './modals/_lines_filters_modal.html.twig' with { municipalities: municipalities } %}
</div>

{% import './infos/_macros.html.twig' as macros %}
{{ macros.static_modal('Confirmer la suppression', 'Voulez-vous vraiment supprimer cette ligne ?') }}

<!-- Modal pour confirmer la suppression de toutes les lignes -->
<div class="modal fade" id="deleteAllModal" tabindex="-1" role="dialog" aria-labelledby="deleteAllModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteAllModalLabel">Confirmer la suppression</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Voulez-vous vraiment supprimer <strong>toutes</strong> les lignes téléphoniques ? Cette action est irréversible.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" id="confirm-delete-all-lines-btn">Supprimer tout</button>
            </div>
        </div>
    </div>
</div>


{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script src="{{ asset('js/map.js') }}"></script>
  <script src="{{ asset('js/search-filter.js') }}"></script>
  <script src="{{ asset('js/charts.js') }}"></script>
  <script>
      document.addEventListener('DOMContentLoaded', function() {
          // Initialiser la carte si l'élément existe
          if (document.getElementById("map-agglomeration")) {
              const map = L.map("map-agglomeration").setView([43.3442, 3.2158], 10);

              L.tileLayer("https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png", {
                  attribution: "&copy; OpenStreetMap contributors",
              }).addTo(map);

              // Chargement des données GeoJSON
              fetch("/data/beziers-agglo-points.geojson")
                  .then(res => res.json())
                  .then(data => {
                      const layer = L.geoJSON(data, {
                          pointToLayer: function (feature, latlng) {
                              return L.circleMarker(latlng, {
                                  radius: 6,
                                  fillColor: "#1e90ff",
                                  color: "#fff",
                                  weight: 1,
                                  opacity: 1,
                                  fillOpacity: 0.9
                              });
                          },
                          onEachFeature: function (feature, layer) {
                              const props = feature.properties;

                              // Tooltip (survol)
                              if (props && props.nom) {
                                  layer.bindTooltip(props.nom, {
                                      direction: 'top',
                                      offset: [0, -5],
                                      sticky: true
                                  });
                              }

                              // Pas de popup au clic
                          }
                      }).addTo(map);

                      map.fitBounds(layer.getBounds(), {
                          padding: [20, 20],
                          maxZoom: 13
                      });
                  })
                  .catch(err => {
                      console.error("Erreur de chargement GeoJSON :", err);
                  });
          }
      });
      window.allPhoneLines = [];
      window.displayedPhoneLines = [];
      window.currentPage = 1;
      window.totalPages = 1;
      window.itemsPerPage = 50;
      window.totalItems = 0;
      window.currentSearchTerm = '';

      // Charger les données des lignes téléphoniques avec pagination
      window.loadPhoneLines = function(page = 1, searchTerm = '') {
          const url = new URL('/api/phone-line/list', window.location.origin);
          url.searchParams.set('page', page);
          url.searchParams.set('limit', window.itemsPerPage);
          if (searchTerm) {
              url.searchParams.set('search', searchTerm);
          }

          fetch(url)
              .then(response => response.json())
              .then(data => {
                  window.allPhoneLines = data.data;
                  window.displayedPhoneLines = [...window.allPhoneLines];
                  window.totalItems = data.total;
                  window.totalPages = data.totalPages;
                  window.currentPage = data.page;
                  window.currentSearchTerm = searchTerm;

                  window.renderLinesTable(window.displayedPhoneLines);
                  window.renderPagination();
              })
              .catch(error => {
                  console.error('Erreur lors du chargement des lignes téléphoniques:', error);
              });
      }

      // Générer la pagination
      window.renderPagination = function() {
          const paginationElement = document.getElementById('phone-lines-pagination');
          if (!paginationElement) return;

          paginationElement.innerHTML = '';

          // Bouton début
          const firstLi = document.createElement('li');
          firstLi.className = `page-item ${window.currentPage === 1 ? 'disabled' : ''}`;
          const firstLink = document.createElement('a');
          firstLink.className = 'page-link';
          firstLink.href = '#';
          firstLink.textContent = 'Début';
          firstLink.addEventListener('click', (e) => {
              e.preventDefault();
              if (window.currentPage > 1) {
                  window.loadPhoneLines(1, window.currentSearchTerm || '');
              }
          });
          firstLi.appendChild(firstLink);
          paginationElement.appendChild(firstLi);

          // Bouton précédent
          const prevLi = document.createElement('li');
          prevLi.className = `page-item ${window.currentPage === 1 ? 'disabled' : ''}`;
          const prevLink = document.createElement('a');
          prevLink.className = 'page-link';
          prevLink.href = '#';
          prevLink.textContent = 'Précédent';
          prevLink.addEventListener('click', (e) => {
              e.preventDefault();
              if (window.currentPage > 1) {
                  window.loadPhoneLines(window.currentPage - 1, window.currentSearchTerm || '');
              }
          });
          prevLi.appendChild(prevLink);
          paginationElement.appendChild(prevLi);

          // Pages numérotées
          const maxPagesToShow = 5;
          let startPage = Math.max(1, window.currentPage - Math.floor(maxPagesToShow / 2));
          let endPage = Math.min(window.totalPages, startPage + maxPagesToShow - 1);

          if (endPage - startPage + 1 < maxPagesToShow) {
              startPage = Math.max(1, endPage - maxPagesToShow + 1);
          }

          for (let i = startPage; i <= endPage; i++) {
              const pageLi = document.createElement('li');
              pageLi.className = `page-item ${i === window.currentPage ? 'active' : ''}`;
              const pageLink = document.createElement('a');
              pageLink.className = 'page-link';
              pageLink.href = '#';
              pageLink.textContent = i;
              pageLink.addEventListener('click', (e) => {
                  e.preventDefault();
                  window.loadPhoneLines(i, window.currentSearchTerm || '');
              });
              pageLi.appendChild(pageLink);
              paginationElement.appendChild(pageLi);
          }

          // Bouton suivant
          const nextLi = document.createElement('li');
          nextLi.className = `page-item ${window.currentPage === window.totalPages ? 'disabled' : ''}`;
          const nextLink = document.createElement('a');
          nextLink.className = 'page-link';
          nextLink.href = '#';
          nextLink.textContent = 'Suivant';
          nextLink.addEventListener('click', (e) => {
              e.preventDefault();
              if (window.currentPage < window.totalPages) {
                  window.loadPhoneLines(window.currentPage + 1, window.currentSearchTerm || '');
              }
          });
          nextLi.appendChild(nextLink);
          paginationElement.appendChild(nextLi);

          // Bouton fin
          const lastLi = document.createElement('li');
          lastLi.className = `page-item ${window.currentPage === window.totalPages ? 'disabled' : ''}`;
          const lastLink = document.createElement('a');
          lastLink.className = 'page-link';
          lastLink.href = '#';
          lastLink.textContent = 'Fin';
          lastLink.addEventListener('click', (e) => {
              e.preventDefault();
              if (window.currentPage < window.totalPages) {
                  window.loadPhoneLines(window.totalPages, window.currentSearchTerm || '');
              }
          });
          lastLi.appendChild(lastLink);
          paginationElement.appendChild(lastLi);
      }

        // Fonction pour rendre la table des lignes
        window.renderLinesTable = function(linesToDisplay) {
            const tbody = document.querySelector('.table tbody');
            tbody.innerHTML = ''; // Clear current table

            linesToDisplay.forEach(line => {
                const row = `
                    <tr>
                        <td>${line.directLine && line.directLine !== '' ? line.directLine : 'Non défini'}</td>
                        <td>${line.shortNumber && line.shortNumber !== '' ? line.shortNumber : 'Non défini'}</td>
                        <td>${line.municipality && line.municipality.name ? line.municipality.name : 'Non défini'}</td>
                        <td>${line.location && line.location !== '' ? line.location : 'Non défini'}</td>
                        <td>${line.service && line.service !== '' ? line.service : 'Non défini'}</td>
                        <td>${line.assignedTo && line.assignedTo !== '' ? line.assignedTo : 'Non défini'}</td>
                        <td>${line.operator && line.operator !== '' ? line.operator : 'Non défini'}</td>
                        <td>${line.lineType && line.lineType !== '' ? line.lineType : 'Non défini'}</td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-primary edit-btn mr-1" onclick="editLine(${line.id})">
                                    <i class="fa fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger delete-btn" data-id="${line.id}" data-type="phone_line" onclick="openDeleteModal(${line.id}, 'phone_line')">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // Initialisation de la carte des lignes
        function initMap() {
            // Logique de la carte à implémenter
        }

        // Initial render of the table

        // Gestion des exports
        document.addEventListener('DOMContentLoaded', function() {
            // Export CSV
            const exportCsvBtn = document.getElementById('export-csv-btn');
            if (exportCsvBtn) {
                exportCsvBtn.addEventListener('click', function(e) {
                    e.preventDefault();

                    // Récupérer les filtres actifs
                    const filters = getActiveFilters();

                    // Construire l'URL avec les filtres
                    let url = '/api/phone-line/export/csv';
                    if (Object.keys(filters).length > 0) {
                        url += '?' + new URLSearchParams(filters).toString();
                    }

                    // Rediriger vers l'URL d'export
                    window.location.href = url;
                });
            }

            // Export PDF
            const exportPdfBtn = document.getElementById('export-pdf-btn');
            if (exportPdfBtn) {
                exportPdfBtn.addEventListener('click', function(e) {
                    e.preventDefault();

                    // Récupérer les filtres actifs
                    const filters = getActiveFilters();

                    // Construire l'URL avec les filtres
                    let url = '/api/phone-line/export/pdf';
                    if (Object.keys(filters).length > 0) {
                        url += '?' + new URLSearchParams(filters).toString();
                    }

                    // Ouvrir l'URL d'export dans une nouvelle fenêtre
                    window.open(url, '_blank');
                });
            }

        });

        // Fonction pour récupérer les filtres actifs pour les exports (accessible globalement)
        function getActiveFilters() {
            const filters = {};

            // Récupérer les filtres depuis le formulaire de filtres
            const filterForm = document.getElementById('lignesFiltersForm');
            if (filterForm) {
                const municipality = document.getElementById('municipalityFilter');
                if (municipality && municipality.value) {
                    filters.municipality = municipality.value;
                }

                const service = document.getElementById('serviceFilter');
                if (service && service.value) {
                    filters.service = service.value;
                }

                const operator = document.getElementById('operatorFilter');
                if (operator && operator.value) {
                    filters.operator = operator.value;
                }

                const lineType = document.getElementById('lineTypeFilter');
                if (lineType && lineType.value) {
                    filters.lineType = lineType.value;
                }

                const location = document.getElementById('locationFilter');
                if (location && location.value) {
                    filters.location = location.value;
                }

                const assignedTo = document.getElementById('assignedToFilter');
                if (assignedTo && assignedTo.value) {
                    filters.assignedTo = assignedTo.value;
                }

                const directLine = document.getElementById('directLineFilter');
                if (directLine && directLine.value) {
                    filters.directLine = directLine.value;
                }

                const shortNumber = document.getElementById('shortNumberFilter');
                if (shortNumber && shortNumber.value) {
                    filters.shortNumber = shortNumber.value;
                }
            }

            return filters;
        }
        document.addEventListener('DOMContentLoaded', function() {
            renderLinesTable(displayedPhoneLines);

        });
    // Filter logic for Phone Lines
    const applyFiltersBtn = document.getElementById('applyFiltersBtn');
    const resetFiltersBtn = document.getElementById('resetFiltersBtn');
    const filtersForm = document.getElementById('lignesFiltersForm');
    const lignesFiltersModal = document.getElementById('lignesFiltersModal');

    if (applyFiltersBtn) {
        applyFiltersBtn.addEventListener('click', function() {
            const filters = getActiveFilters();

            window.displayedPhoneLines = window.allPhoneLines.filter(line => {
                // Filtre par commune
                if (filters.municipality && line.municipality && line.municipality.id) {
                    if (line.municipality.id.toString() !== filters.municipality) {
                        return false;
                    }
                }

                // Filtre par service
                if (filters.service && line.service) {
                    if (line.service.toLowerCase() !== filters.service.toLowerCase()) {
                        return false;
                    }
                }

                // Filtre par opérateur
                if (filters.operator && line.operator) {
                    if (line.operator.toLowerCase() !== filters.operator.toLowerCase()) {
                        return false;
                    }
                }

                // Filtre par type de ligne
                if (filters.lineType && line.lineType) {
                    if (line.lineType.toLowerCase() !== filters.lineType.toLowerCase()) {
                        return false;
                    }
                }

                // Filtre par localisation
                if (filters.location && line.location) {
                    if (!line.location.toLowerCase().includes(filters.location.toLowerCase())) {
                        return false;
                    }
                }

                // Filtre par attribué à
                if (filters.assignedTo && line.assignedTo) {
                    if (!line.assignedTo.toLowerCase().includes(filters.assignedTo.toLowerCase())) {
                        return false;
                    }
                }

                // Filtre par ligne directe
                if (filters.directLine && line.directLine) {
                    if (!line.directLine.toLowerCase().includes(filters.directLine.toLowerCase())) {
                        return false;
                    }
                }

                // Filtre par numéro court
                if (filters.shortNumber && line.shortNumber) {
                    if (!line.shortNumber.toLowerCase().includes(filters.shortNumber.toLowerCase())) {
                        return false;
                    }
                }

                return true;
            });

            window.renderLinesTable(window.displayedPhoneLines);

            // Mettre à jour la pagination pour les données filtrées
            window.totalItems = window.displayedPhoneLines.length;
            window.totalPages = Math.ceil(window.totalItems / window.itemsPerPage);
            window.currentPage = 1;
            window.renderPagination();

            $('#lignesFiltersModal').modal('hide');
        });
    }

    if (resetFiltersBtn) {
        resetFiltersBtn.addEventListener('click', function() {
            filtersForm.reset();
            window.displayedPhoneLines = [...window.allPhoneLines];
            window.renderLinesTable(window.displayedPhoneLines);

            // Restaurer la pagination originale
            window.totalItems = window.allPhoneLines.length;
            window.totalPages = Math.ceil(window.totalItems / window.itemsPerPage);
            window.currentPage = 1;
            window.renderPagination();

            $('#lignesFiltersModal').modal('hide');
        });
    }
    </script>
    <!-- Fonction pour ouvrir le modal de suppression -->
    <script>
        // Charger les lignes téléphoniques au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            window.loadPhoneLines();

            // Gestionnaire pour le bouton de suppression de toutes les lignes
            const deleteAllBtn = document.getElementById('confirm-delete-all-lines-btn');
            if (deleteAllBtn) {
                deleteAllBtn.addEventListener('click', function() {
                    fetch('/api/phone-line/delete-all', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            $('#deleteAllModal').modal('hide');
                            alert(data.message);
                            window.location.reload();
                        } else {
                            alert('Erreur: ' + (data.error || 'Une erreur est survenue lors de la suppression'));
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        alert('Une erreur est survenue lors de la suppression');
                    });
                });
            }
        });

        function openDeleteModal(id, type) {
            console.log("Ouverture du modal de suppression pour", type, "avec ID", id);

            // Stocker les données dans le modal
            const modal = document.getElementById('staticModal');
            if (modal) {
                modal.setAttribute('data-item-id', id);
                modal.setAttribute('data-item-type', type);

                if (type === 'phone_line') {
                    modal.setAttribute('data-line-id', id);
                }

                // Mettre à jour le texte du modal
                const title = modal.querySelector('.modal-title');
                const body = modal.querySelector('.modal-body p');

                if (title) {
                    title.textContent = 'Confirmer la suppression de ' +
                        (type === 'equipment' ? 'l\'équipement' :
                         type === 'box' ? 'la box' :
                         type === 'phone_line' ? 'la ligne téléphonique' : 'l\'élément');
                }

                if (body) {
                    body.textContent = 'Voulez-vous vraiment supprimer ' +
                        (type === 'equipment' ? 'cet équipement' :
                         type === 'box' ? 'cette box' :
                         type === 'phone_line' ? 'cette ligne téléphonique' : 'cet élément') + ' ?';
                }

                // Ouvrir explicitement la modale avec jQuery
                $('#staticModal').modal('show');
            } else {
                console.error("Modal #staticModal non trouvé dans le DOM");
            }
        }
    </script>
    <!-- Charger delete-confirmation.js avant phone-lines.js pour éviter les conflits -->
    <script src="{{ asset('js/delete-confirmation.js') }}"></script>
    <script src="{{ asset('js/phone-lines.js') }}"></script>

{% endblock %}
