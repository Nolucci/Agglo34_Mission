{% extends './base.html.twig' %}

{% block title %}Informations du Parc Informatique{% endblock %}

{% block body %}
<div class="page-wrapper">
    <div class="page-container">
        <div class="main-content">
            <div class="section__content section__content--p30">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Statistiques du Parc</strong>
                                </div>
                                <div class="card-body text-center" style="height: 300px;">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fas fa-desktop fa-2x"></i></h5>
                                                    <p class="card-text">Total des équipements</p>
                                                    <h3 style="font-size: 1.5rem;">{{ equipments|length }}</h3>{# Reduced font size #}
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fas fa-building fa-2x"></i></h5>
                                                    <p class="card-text">Services uniques</p>
                                                    <h3 style="font-size: 1.5rem;">{{ parkStats.unique_services }}</h3>{# Reduced font size #}
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fas fa-building fa-2x"></i></h5>
                                                    <p class="card-text">Communes uniques</p>
                                                    <h3 style="font-size: 1.5rem;">{{ parkStats.unique_municipalities }}</h3>{# Reduced font size #}
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fas fa-check-circle fa-2x"></i></h5>
                                                    <p class="card-text">Équipements actifs</p>
                                                    <h3 style="font-size: 1.5rem;">{{ parkStats.active_equipments }}</h3>{# Reduced font size #}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-3">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Statistiques des Équipements</strong>
                                </div>
                                <div class="card-body text-center" style="height: 300px;">
                                    <canvas id="team-chart"></canvas>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-3">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Équipements par Statut</strong>
                                </div>
                                <div class="card-body text-center" style="height: 300px;">
                                    <canvas id="status-doughnut-chart"></canvas>
                                </div>
                            </div>
                        </div>

                         <div class="col-lg-3">
                             <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Carte des Équipements</strong>
                                </div>
                                <div class="card-body text-center" style="height: 300px;">
                                    <div id="map-agglomeration" style="height: 300px; width: 100%; border: 1px solid #ccc;"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-12">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Liste des Équipements Informatiques</strong>
                                    <button class="btn btn-sm btn-success float-right mr-2" data-toggle="modal" data-target="#parkModal">
                                        <i class="fa fa-plus"></i> Ajouter
                                    </button>
                                    <button class="btn btn-sm btn-primary float-right" data-toggle="modal" data-target="#parkFiltersModal">
                                        <i class="fa fa-filter"></i> Filtres
                                    </button>
                                </div>
                                <div class="card-body" style="height: auto;">{# Adjusted height for table #}
                                     <div class="form-group">
                                        <label for="searchInput">Rechercher par attribut:</label>
                                        <input type="text" class="form-control" id="searchInput" placeholder="Entrez un terme de recherche">
                                    </div>
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Commune</th>
                                                    <th>Type</th>
                                                    <th>Marque</th>
                                                    <th>Modèle</th>
                                                    <th>Attribué à</th>
                                                    <th>Localisation</th>
                                                    <th>Statut</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {% for equipment in equipments %}
                                                <tr>
                                                    <td>{{ equipment.municipality is not empty and equipment.municipality.name is defined ? equipment.municipality.name : 'Non défini' }}</td>
                                                    <td>{{ equipment.type is not empty ? equipment.type : 'Non défini' }}</td>
                                                    <td>{{ equipment.brand is not empty ? equipment.brand : 'Non défini' }}</td>
                                                    <td>{{ equipment.model is not empty ? equipment.model : 'Non défini' }}</td>
                                                    <td>{{ equipment.assignedTo is not empty ? equipment.assignedTo : 'Non assigné' }}</td>
                                                    <td>{{ equipment.location is not empty ? equipment.location : 'Non défini' }}</td>
                                                    <td>
                                                        {% if equipment.isActive %}
                                                            <span class="badge badge-success">Actif</span>
                                                        {% else %}
                                                            <span class="badge badge-secondary">Inactif</span>
                                                        {% endif %}
                                                    </td>
                                                    <td>
                                                        <div class="btn-group">
                                                            <button class="btn btn-sm btn-primary edit-btn mr-1" onclick="editEquipment({{ equipment.id }})">
                                                                <i class="fa fa-edit"></i>
                                                            </button>
                                                            <button class="btn btn-sm btn-danger delete-btn" data-id="{{ equipment.id }}" data-type="equipment" data-toggle="modal" data-target="#staticModal">
                                                                <i class="fa fa-trash"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                                {% endfor %}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% include './modals/_park_modal.html.twig' %}
{% include './modals/_park_filters_modal.html.twig' %}
</div>

{# {% include './modals/_park_filters_modal.html.twig' with { equipments: equipments } %} #}
{% import './infos/_macros.html.twig' as macros %}
{{ macros.static_modal('Confirmer la suppression', 'Voulez-vous vraiment supprimer cet élément ?') }}

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/park-map.js') }}"></script>
    <script src="{{ asset('js/equipment.js') }}"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialiser la carte si l'élément existe
            if (document.getElementById("map-agglomeration")) {
                const map = L.map("map-agglomeration").setView([43.3442, 3.2158], 10);

                L.tileLayer("https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png", {
                    attribution: "&copy; OpenStreetMap contributors",
                }).addTo(map);

                // Chargement des données GeoJSON
                fetch("/data/beziers-agglo-points.geojson")
                    .then(res => res.json())
                    .then(data => {
                        const layer = L.geoJSON(data, {
                            pointToLayer: function (feature, latlng) {
                                return L.circleMarker(latlng, {
                                    radius: 6,
                                    fillColor: "#1e90ff",
                                    color: "#fff",
                                    weight: 1,
                                    opacity: 1,
                                    fillOpacity: 0.9
                                });
                            },
                            onEachFeature: function (feature, layer) {
                                const props = feature.properties;

                                // Tooltip (survol)
                                if (props && props.nom) {
                                    layer.bindTooltip(props.nom, {
                                        direction: 'top',
                                        offset: [0, -5],
                                        sticky: true
                                    });
                                }

                                // Popup (clic)
                                layer.on('click', () => {
                                    let rows = "";
                                    for (const [key, value] of Object.entries(props)) {
                                        rows += `<tr><th>${key}</th><td>${value}</td></tr>`;
                                    }

                                    const popupContent = `
                                    <div>
                                        <h5>${props.nom}</h5>
                                        <table class="table table-bordered table-sm">
                                            <tbody>${rows}</tbody>
                                        </table>
                                    </div>
                                `;

                                    layer.bindPopup(popupContent, {
                                        offset: [0, -5],
                                        autoPan: true,
                                        closeButton: true
                                    }).openPopup();
                                });
                            }
                        }).addTo(map);

                        map.fitBounds(layer.getBounds(), {
                            padding: [20, 20],
                            maxZoom: 13
                        });
                    })
                    .catch(err => {
                        console.error("Erreur de chargement GeoJSON :", err);
                    });
            }
        });
    </script>
    <script>
        const allEquipments = {{ equipments | json_encode | raw }};
        let displayedEquipments = [...allEquipments];

        // Team Commits Chart
        var ctxTeam = document.getElementById("team-chart");
        if (ctxTeam) {
            ctxTeam.height = 150;
            var myChartTeam = new Chart(ctxTeam, {
                type: 'bar',
                data: {
                    labels: {{ teamChartData.labels | json_encode | raw }},
                    type: 'bar',
                    defaultFontFamily: 'Poppins',
                    datasets: [{
                        data: {{ teamChartData.data | json_encode | raw }},
                        label: "Équipements par Type",
                        backgroundColor: 'rgba(0,103,255,.15)',
                        borderColor: 'rgba(0,103,255,0.5)',
                        borderWidth: 3.5,
                        pointStyle: 'circle',
                        pointRadius: 5,
                        pointBorderColor: 'transparent',
                        pointBackgroundColor: 'rgba(0,103,255,0.5)',
                    },]
                },
                options: {
                    responsive: true,
                    tooltips: {
                        mode: 'index',
                        titleFontSize: 12,
                        titleFontColor: '#000',
                        bodyFontColor: '#000',
                        backgroundColor: '#fff',
                        titleFontFamily: 'Poppins',
                        bodyFontFamily: 'Poppins',
                        cornerRadius: 3,
                        intersect: false,
                    },
                    legend: {
                        display: false,
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            fontFamily: 'Poppins',
                        },
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            gridLines: {
                                display: false,
                                drawBorder: false
                            },
                            scaleLabel: {
                                display: false,
                                labelString: 'Month'
                            },
                            ticks: {
                                fontFamily: "Poppins"
                            }
                        }],
                        yAxes: [{
                            display: true,
                            gridLines: {
                                display: false,
                                drawBorder: false
                            },
                            scaleLabel: {
                                display: true,
                                labelString: 'Value',
                                fontFamily: "Poppins"
                            },
                            ticks: {
                                fontFamily: "Poppins"
                            }
                        }]
                    },
                    title: {
                        display: false,
                    }
                }
            });
        }

        // Status Doughnut Chart
        var ctxStatus = document.getElementById("status-doughnut-chart");
        if (ctxStatus) {
            ctxStatus.height = 150; // Ajustez la hauteur si nécessaire
            var myChartStatus = new Chart(ctxStatus, {
                type: 'bar',
                data: {
                    datasets: [{
                        data: {{ statusChartData.data | json_encode | raw }},
                        backgroundColor: [
                            "rgba(40, 167, 69, 0.9)", // Vert pour Actif
                            "rgba(108, 117, 125, 0.7)" // Gris pour Inactif
                        ],
                        hoverBackgroundColor: [
                            "rgba(40, 167, 69, 1)",
                            "rgba(108, 117, 125, 0.9)"
                        ],
                    }],
                    labels: {{ statusChartData.labels | json_encode | raw }}
                },
                options: {
                    legend: {
                        position: 'top',
                        labels: {
                            fontFamily: 'Poppins'
                        }
                    },
                    responsive: true
                }
            });
        }


        // Fonction pour rendre la table des équipements
        function renderEquipmentsTable(equipmentsToDisplay) {
            const tbody = document.querySelector('.table tbody'); // Assuming only one table for now
            tbody.innerHTML = ''; // Clear current table

            equipmentsToDisplay.forEach(equipment => {
                const row = `
                    <tr>
                        <td>${equipment.municipality && equipment.municipality.name ? equipment.municipality.name : 'Non défini'}</td>
                        <td>${equipment.type || 'Non défini'}</td>
                        <td>${equipment.brand || 'Non défini'}</td>
                        <td>${equipment.model || 'Non défini'}</td>
                        <td>${equipment.assignedTo || 'Non assigné'}</td>
                        <td>${equipment.location || 'Non défini'}</td>
                        <td>
                            ${equipment.isActive ? '<span class="badge badge-success">Actif</span>' : '<span class="badge badge-secondary">Inactif</span>'}
                        </td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-primary edit-btn mr-1" onclick="editEquipment(${equipment.id})">
                                    <i class="fa fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger delete-btn" data-id="${equipment.id}" data-type="equipment" data-toggle="modal" data-target="#staticModal">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // Initialisation de la carte des équipements
        function initMap() {
            // Logique de la carte à implémenter
        }

        // Initial render of the table
        document.addEventListener('DOMContentLoaded', function() {
            renderEquipmentsTable(displayedEquipments);

            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', function(event) {
                    const searchTerm = event.target.value.toLowerCase();
                    displayedEquipments = allEquipments.filter(equipment => {
                        for (const key in equipment) {
                            const value = equipment[key];
                            if (key === 'municipality') {
                                if (value && value.name && value.name.toLowerCase().includes(searchTerm)) {
                                    return true;
                                }
                            } else if (value !== null && value !== undefined && value.toString().toLowerCase().includes(searchTerm)) {
                                return true;
                            }
                        }
                        return false;
                    });
                    renderEquipmentsTable(displayedEquipments);
                });
            }
        });

        // Filter logic for Park Equipment
        const parkFilterForm = document.getElementById('park-filter-form');
        const applyParkFiltersButton = document.getElementById('apply-park-filters');

        if (applyParkFiltersButton) {
            applyParkFiltersButton.addEventListener('click', function() {
                const filterType = document.getElementById('filter-type').value.toLowerCase();
                const filterBrand = document.getElementById('filter-brand').value.toLowerCase();
                const filterMunicipality = document.getElementById('filter-municipality').value.toLowerCase();
                const filterStatus = document.getElementById('filter-status').value.toLowerCase();

                displayedEquipments = allEquipments.filter(equipment => {
                    const matchesType = filterType === '' || (equipment.type && equipment.type.toLowerCase().includes(filterType));
                    const matchesBrand = filterBrand === '' || (equipment.brand && equipment.brand.toLowerCase().includes(filterBrand));
                    const matchesMunicipality = filterMunicipality === '' || (equipment.municipality && equipment.municipality.toLowerCase().includes(filterMunicipality));
                    const matchesStatus = filterStatus === '' || (equipment.isActive ? 'actif' : 'inactif').includes(filterStatus);

                    return matchesType && matchesBrand && matchesMunicipality && matchesStatus;
                });

                renderEquipmentsTable(displayedEquipments);

                // Close the modal after applying filters
                $('#parkFiltersModal').modal('hide');
            });
        }
    $(document).ready(function() {
        $('#staticModal').on('show.bs.modal', function (event) {
            const button = $(event.relatedTarget); // Button that triggered the modal
            const itemId = button.data('id'); // Extract info from data-* attributes
            const itemType = button.data('type');

            const modal = $(this);
            modal.find('.modal-title').text('Confirmer la suppression de ' + itemType.charAt(0).toUpperCase() + itemType.slice(1));
            modal.find('.modal-body p').text('Voulez-vous vraiment supprimer cet ' + (itemType === 'equipment' ? 'équipement' : 'élément') + ' ?');

            // Set data attributes on the confirm button
            const confirmButton = modal.find('.btn-primary');
            confirmButton.data('id', itemId);
            confirmButton.data('type', itemType);
        });

        $('#staticModal .btn-primary').on('click', function() {
            const button = $(this);
            const itemId = button.data('id');
            const itemType = button.data('type');

            if (itemType === 'equipment') {
                deleteEquipment(itemId);
            } else {
                console.log('Delete confirmed for item ID: ' + itemId + ' of type: ' + itemType);
                // Close the modal
                $('#staticModal').modal('hide');
            }
        });
    });
    </script>
{% endblock %}
