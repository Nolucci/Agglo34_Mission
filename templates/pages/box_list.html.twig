{% extends './base.html.twig' %}

{% block title %}Informations des Box{% endblock %}

{% block body %}
<div class="page-wrapper">
    <div class="page-container">
        <div class="main-content">
            <div class="section__content section__content--p30 box-list-content">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Statistiques des Boxs</strong>
                                </div>
                                <div class="card-body text-center" style="height: 300px;">
                                    <div class="row">
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fas fa-desktop fa-2x"></i></h5>
                                                    <p class="card-text">Total des box</p>
                                                    <h3 style="font-size: 1.5rem;">{{ boxes|length }}</h3>{# Reduced font size #}
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fas fa-building fa-2x"></i></h5>
                                                    <p class="card-text">Bâtiments</p>
                                                    <h3 style="font-size: 1.5rem;">{{ boxStats.unique_services }}</h3>{# Reduced font size #}
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fas fa-building fa-2x"></i></h5>
                                                    <p class="card-text">Entités</p>
                                                    <h3 style="font-size: 1.5rem;">{{ boxStats.unique_municipalities }}</h3>{# Reduced font size #}
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-6">
                                            <div class="card text-center">
                                                <div class="card-body">
                                                    <h5 class="card-title"><i class="fas fa-check-circle fa-2x"></i></h5>
                                                    <p class="card-text">Box actives</p>
                                                    <h3 style="font-size: 1.5rem;">{{ boxStats.active_boxes }}</h3>{# Reduced font size #}
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Graphiques des Box</strong>
                                </div>
                                <div class="card-body" style="height: 300px;">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div style="height: 250px;">
                                                <canvas id="box-type-chart"></canvas>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div style="height: 250px;">
                                                <canvas id="box-commune-chart"></canvas>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-3">
                            <div class="card">
                               <div class="card-header">
                                   <strong class="card-title">Carte des Box</strong>
                               </div>
                               <div class="card-body text-center" style="height: 300px;">
                                   <div id="map-agglomeration" style="height: 300px; width: 100%; border: 1px solid #ccc;"></div>
                               </div>
                           </div>
                       </div>
                    </div>

                    <div class="row">
                        <div class="col-lg-12">
                            <div class="card">
                                <div class="card-header">
                                    <strong class="card-title">Liste des Boxs</strong>
                                    <button class="btn btn-sm btn-danger float-right ml-2" id="delete-all-boxes-btn" data-toggle="modal" data-target="#deleteAllBoxesModal">
                                        <i class="fa fa-trash"></i> Supprimer tout
                                    </button>
                                    <div class="btn-group float-right ml-2">
                                        <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" id="exportDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            <i class="fa fa-download"></i> Exporter
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="exportDropdown">
                                            <a class="dropdown-item" href="#" id="export-csv-btn">
                                                <i class="fa fa-file-excel-o"></i> Export CSV
                                            </a>
                                            <a class="dropdown-item" href="#" id="export-pdf-btn">
                                                <i class="fa fa-file-pdf-o"></i> Export PDF
                                            </a>
                                        </div>
                                    </div>
                                    <button class="btn btn-sm btn-primary float-right ml-2" data-toggle="modal" data-target="#boxFiltersModal">
                                        <i class="fa fa-filter"></i> Filtres
                                    </button>
                                    <button class="btn btn-sm btn-success float-right" data-toggle="modal" data-target="#boxModal">
                                        <i class="fa fa-plus"></i> Ajouter
                                    </button>
                                </div>
                                <div class="card-body" style="height: auto;">{# Adjusted height for table #}
                                     <div class="form-group">
                                        <label for="searchBoxInput">Rechercher par attribut:</label>
                                        <input type="text" class="form-control" id="searchBoxInput" placeholder="Entrez un terme de recherche">
                                    </div>
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Commune</th>
                                                    <th>Service</th>
                                                    <th>Adresse</th>
                                                    <th>Ligne Support</th>
                                                    <th>Type</th>
                                                    <th>Statut</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody id="boxes-tbody">
                                                <!-- Les données seront chargées via JavaScript -->
                                            </tbody>
                                        </table>
                                    </div>
                                    <!-- Pagination intégrée dans le tableau -->
                                    <div class="mt-3">
                                        <nav aria-label="Pagination des boxs">
                                            <ul class="pagination justify-content-center" id="boxes-pagination">
                                                <!-- La pagination sera générée par JavaScript -->
                                            </ul>
                                        </nav>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% include './modals/_box_modal.html.twig' %}
{% include './modals/_box_filters_modal.html.twig' %}
</div>

{# {% include './modals/_park_filters_modal.html.twig' with { equipments: equipments } %} #}
{% import './infos/_macros.html.twig' as macros %}
{{ macros.static_modal('Confirmer la suppression', 'Voulez-vous vraiment supprimer cet élément ?') }}

<!-- Modal pour confirmer la suppression de toutes les boxs -->
<div class="modal fade" id="deleteAllBoxesModal" tabindex="-1" role="dialog" aria-labelledby="deleteAllBoxesModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteAllBoxesModalLabel">Confirmer la suppression</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>Voulez-vous vraiment supprimer <strong>toutes</strong> les boxs ? Cette action est irréversible.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" id="confirm-delete-all-boxes-btn">Supprimer tout</button>
            </div>
        </div>
    </div>
</div>


{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="{{ asset('js/park-map.js') }}"></script>
    <script src="{{ asset('js/box.js') }}"></script>
    <script src="{{ asset('js/search-filter.js') }}"></script>
    <script src="{{ asset('js/charts.js') }}"></script>
    <!-- Charger delete-confirmation.js après les autres scripts pour s'assurer que les fonctions sont définies -->
    <script src="{{ asset('js/delete-confirmation.js') }}" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialiser la carte si l'élément existe
            if (document.getElementById("map-agglomeration")) {
                const map = L.map("map-agglomeration").setView([43.3442, 3.2158], 10);

                L.tileLayer("https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png", {
                    attribution: "&copy; OpenStreetMap contributors",
                }).addTo(map);

                // Chargement des données GeoJSON
                fetch("/data/beziers-agglo-points.geojson")
                    .then(res => res.json())
                    .then(data => {
                        const layer = L.geoJSON(data, {
                            pointToLayer: function (feature, latlng) {
                                return L.circleMarker(latlng, {
                                    radius: 6,
                                    fillColor: "#1e90ff",
                                    color: "#fff",
                                    weight: 1,
                                    opacity: 1,
                                    fillOpacity: 0.9
                                });
                            },
                            onEachFeature: function (feature, layer) {
                                const props = feature.properties;

                                // Tooltip (survol)
                                if (props && props.nom) {
                                    layer.bindTooltip(props.nom, {
                                        direction: 'top',
                                        offset: [0, -5],
                                        sticky: true
                                    });
                                }

                                // Pas de popup au clic
                            }
                        }).addTo(map);

                        map.fitBounds(layer.getBounds(), {
                            padding: [20, 20],
                            maxZoom: 13
                        });
                    })
                    .catch(err => {
                        console.error("Erreur de chargement GeoJSON :", err);
                    });
            }
        });
    </script>
    <script>
        window.allBoxes = [];
        window.displayedBoxes = [];
        window.currentPage = 1;
        window.totalPages = 1;
        window.itemsPerPage = 50;
        window.totalItems = 0;
        window.currentSearchTerm = '';

        // Charger les données des boxs avec pagination
        window.loadBoxes = function(page = 1, searchTerm = '') {
            const url = new URL('/api/box/list', window.location.origin);
            url.searchParams.set('page', page);
            url.searchParams.set('limit', window.itemsPerPage);
            url.searchParams.set('sort', 'commune,service');
            url.searchParams.set('order', 'asc');
            if (searchTerm) {
                url.searchParams.set('search', searchTerm);
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    window.allBoxes = data.boxes;
                    window.displayedBoxes = [...window.allBoxes];
                    window.totalItems = data.total;
                    window.totalPages = data.totalPages;
                    window.currentPage = data.page;
                    window.currentSearchTerm = searchTerm;

                    window.renderBoxesTable(window.displayedBoxes);
                    window.renderBoxPagination();
                })
                .catch(error => {
                    console.error('Erreur lors du chargement des boxs:', error);
                });
        }

        // Générer la pagination
        window.renderBoxPagination = function() {
            const paginationElement = document.getElementById('boxes-pagination');
            if (!paginationElement) return;

            paginationElement.innerHTML = '';

            // Bouton début
            const firstLi = document.createElement('li');
            firstLi.className = `page-item ${window.currentPage === 1 ? 'disabled' : ''}`;
            const firstLink = document.createElement('a');
            firstLink.className = 'page-link';
            firstLink.href = '#';
            firstLink.textContent = 'Début';
            firstLink.addEventListener('click', (e) => {
                e.preventDefault();
                if (window.currentPage > 1) {
                    window.loadBoxes(1, window.currentSearchTerm || '');
                }
            });
            firstLi.appendChild(firstLink);
            paginationElement.appendChild(firstLi);

            // Bouton précédent
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${window.currentPage === 1 ? 'disabled' : ''}`;
            const prevLink = document.createElement('a');
            prevLink.className = 'page-link';
            prevLink.href = '#';
            prevLink.textContent = 'Précédent';
            prevLink.addEventListener('click', (e) => {
                e.preventDefault();
                if (window.currentPage > 1) {
                    window.loadBoxes(window.currentPage - 1, window.currentSearchTerm || '');
                }
            });
            prevLi.appendChild(prevLink);
            paginationElement.appendChild(prevLi);

            // Pages numérotées
            const maxPagesToShow = 5;
            let startPage = Math.max(1, window.currentPage - Math.floor(maxPagesToShow / 2));
            let endPage = Math.min(window.totalPages, startPage + maxPagesToShow - 1);

            if (endPage - startPage + 1 < maxPagesToShow) {
                startPage = Math.max(1, endPage - maxPagesToShow + 1);
            }

            for (let i = startPage; i <= endPage; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = `page-item ${i === window.currentPage ? 'active' : ''}`;
                const pageLink = document.createElement('a');
                pageLink.className = 'page-link';
                pageLink.href = '#';
                pageLink.textContent = i;
                pageLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    window.loadBoxes(i, window.currentSearchTerm || '');
                });
                pageLi.appendChild(pageLink);
                paginationElement.appendChild(pageLi);
            }

            // Bouton suivant
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${window.currentPage === window.totalPages ? 'disabled' : ''}`;
            const nextLink = document.createElement('a');
            nextLink.className = 'page-link';
            nextLink.href = '#';
            nextLink.textContent = 'Suivant';
            nextLink.addEventListener('click', (e) => {
                e.preventDefault();
                if (window.currentPage < window.totalPages) {
                    window.loadBoxes(window.currentPage + 1, window.currentSearchTerm || '');
                }
            });
            nextLi.appendChild(nextLink);
            paginationElement.appendChild(nextLi);

            // Bouton fin
            const lastLi = document.createElement('li');
            lastLi.className = `page-item ${window.currentPage === window.totalPages ? 'disabled' : ''}`;
            const lastLink = document.createElement('a');
            lastLink.className = 'page-link';
            lastLink.href = '#';
            lastLink.textContent = 'Fin';
            lastLink.addEventListener('click', (e) => {
                e.preventDefault();
                if (window.currentPage < window.totalPages) {
                    window.loadBoxes(window.totalPages, window.currentSearchTerm || '');
                }
            });
            lastLi.appendChild(lastLink);
            paginationElement.appendChild(lastLi);
        }

        // Fonction pour rendre la table des box
        window.renderBoxesTable = function(boxesToDisplay) {
            const tbody = document.querySelector('.table tbody'); // Assuming only one table for now
            tbody.innerHTML = ''; // Clear current table

            boxesToDisplay.forEach(box => {
                const row = `
                    <tr>
                        <td>${box.commune || 'Non défini'}</td>
                        <td>${box.service || 'Non défini'}</td>
                        <td>${box.adresse || 'Non défini'}</td>
                        <td>${box.ligne_support || 'Non défini'}</td>
                        <td>${box.type || 'Non défini'}</td>
                        <td>
                            ${box.statut === 'Actif' ? '<span class="badge badge-success">Actif</span>' : '<span class="badge badge-secondary">Inactif</span>'}
                        </td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-sm btn-primary edit-btn mr-1" onclick="editBox(${box.id})">
                                    <i class="fa fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-danger delete-btn" data-id="${box.id}" data-type="box" data-toggle="modal" data-target="#staticModal">
                                    <i class="fa fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        }

        // Initialisation de la carte des box
        function initMap() {
            // Logique de la carte à implémenter
        }

        // Initial render of the table
        document.addEventListener('DOMContentLoaded', function() {
            window.loadBoxes();

            // Gestionnaire pour le bouton de suppression de toutes les boxs
            const deleteAllBtn = document.getElementById('confirm-delete-all-boxes-btn');
            if (deleteAllBtn) {
                deleteAllBtn.addEventListener('click', function() {
                    fetch('/api/box/delete-all', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            $('#deleteAllBoxesModal').modal('hide');
                            alert(data.message);
                            window.location.reload();
                        } else {
                            alert('Erreur: ' + (data.error || 'Une erreur est survenue lors de la suppression'));
                        }
                    })
                    .catch(error => {
                        console.error('Erreur:', error);
                        alert('Une erreur est survenue lors de la suppression');
                    });
                });
            }

            // La recherche est maintenant gérée par search-filter.js
        });

        // Filter logic for Box
        const boxFilterForm = document.getElementById('box-filter-form');
        const applyBoxFiltersButton = document.getElementById('apply-box-filters');

        if (applyBoxFiltersButton) {
            applyBoxFiltersButton.addEventListener('click', function() {
                const filterType = document.getElementById('filter-type').value;
                const filterService = document.getElementById('filter-service').value;
                const filterMunicipality = document.getElementById('filter-municipality').value;
                const filterStatus = document.getElementById('filter-status').value;
                const filterAdresse = document.getElementById('filter-adresse').value;
                const filterLigneSupport = document.getElementById('filter-ligne_support').value;

                window.displayedBoxes = window.allBoxes.filter(box => {
                    // Filtre par type
                    if (filterType && box.type) {
                        if (box.type.toLowerCase() !== filterType.toLowerCase()) {
                            return false;
                        }
                    }

                    // Filtre par service
                    if (filterService && box.service) {
                        if (!box.service.toLowerCase().includes(filterService.toLowerCase())) {
                            return false;
                        }
                    }

                    // Filtre par commune
                    if (filterMunicipality && box.commune) {
                        if (box.commune.toLowerCase() !== filterMunicipality.toLowerCase()) {
                            return false;
                        }
                    }

                    // Filtre par statut
                    if (filterStatus && box.statut) {
                        if (box.statut.toLowerCase() !== filterStatus.toLowerCase()) {
                            return false;
                        }
                    }

                    // Filtre par adresse
                    if (filterAdresse && box.adresse) {
                        if (!box.adresse.toLowerCase().includes(filterAdresse.toLowerCase())) {
                            return false;
                        }
                    }

                    // Filtre par ligne support
                    if (filterLigneSupport && box.ligne_support) {
                        if (!box.ligne_support.toLowerCase().includes(filterLigneSupport.toLowerCase())) {
                            return false;
                        }
                    }

                    return true;
                });

                window.renderBoxesTable(window.displayedBoxes);

                // Mettre à jour la pagination pour les données filtrées
                window.totalItems = window.displayedBoxes.length;
                window.totalPages = Math.ceil(window.totalItems / window.itemsPerPage);
                window.currentPage = 1;
                window.renderBoxPagination();

                // Close the modal after applying filters
                $('#boxFiltersModal').modal('hide');
            });
        }

        // Gestion des exports
        document.addEventListener('DOMContentLoaded', function() {
            // Export CSV
            const exportCsvBtn = document.getElementById('export-csv-btn');
            if (exportCsvBtn) {
                exportCsvBtn.addEventListener('click', function(e) {
                    e.preventDefault();

                    // Récupérer les filtres actifs
                    const filters = getActiveFilters();

                    // Construire l'URL avec les filtres
                    let url = '/api/box/export/csv';
                    if (Object.keys(filters).length > 0) {
                        url += '?' + new URLSearchParams(filters).toString();
                    }

                    // Rediriger vers l'URL d'export
                    window.location.href = url;
                });
            }

            // Export PDF
            const exportPdfBtn = document.getElementById('export-pdf-btn');
            if (exportPdfBtn) {
                exportPdfBtn.addEventListener('click', function(e) {
                    e.preventDefault();

                    // Récupérer les filtres actifs
                    const filters = getActiveFilters();

                    // Construire l'URL avec les filtres
                    let url = '/api/box/export/pdf';
                    if (Object.keys(filters).length > 0) {
                        url += '?' + new URLSearchParams(filters).toString();
                    }

                    // Ouvrir l'URL d'export dans une nouvelle fenêtre
                    window.open(url, '_blank');
                });
            }

        });

        // Fonction pour récupérer les filtres actifs pour les exports (accessible globalement)
        function getActiveFilters() {
            const filters = {};

            // Récupérer les filtres depuis le formulaire de filtres
            const filterForm = document.getElementById('box-filter-form');
            if (filterForm) {
                const commune = document.getElementById('filter-municipality');
                if (commune && commune.value) {
                    filters.municipality = commune.value;
                }

                const service = document.getElementById('filter-service');
                if (service && service.value) {
                    filters.service = service.value;
                }

                const type = document.getElementById('filter-type');
                if (type && type.value) {
                    filters.type = type.value;
                }

                const statut = document.getElementById('filter-status');
                if (statut && statut.value) {
                    filters.status = statut.value;
                }

                const adresse = document.getElementById('filter-adresse');
                if (adresse && adresse.value) {
                    filters.adresse = adresse.value;
                }

                const ligneSupport = document.getElementById('filter-ligne_support');
                if (ligneSupport && ligneSupport.value) {
                    filters.ligne_support = ligneSupport.value;
                }
            }

            return filters;
        }
    // Le code de gestion de la confirmation de suppression a été déplacé dans delete-confirmation.js
    </script>
{% endblock %}